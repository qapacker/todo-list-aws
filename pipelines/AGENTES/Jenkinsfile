pipeline {
    agent none

    environment {
        REPO_URL = 'https://github.com/qapacker/todo-list-aws.git'
        BRANCH = 'develop'
        STACK_NAME = 'todo-list-aws'
        PATH = "$PATH:/var/lib/jenkins/.local/bin"
    }

    stages {

        stage('Get Code') {
            agent { label 'default' }
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Static Test') {
            agent { label 'agent-static' }
            steps {
                sh '''
                    echo "üì¶ Instalando herramientas de an√°lisis"
                    pip install --user flake8 bandit

                    mkdir -p reports
                    flake8 src/ --output-file=reports/flake8-report.txt || true
                    bandit -r src/ -f json -o reports/bandit-report.json || true
                '''
                archiveArtifacts artifacts: 'reports/*', allowEmptyArchive: true
            }
        }

        stage('Deploy') {
            agent { label 'default' }
            steps {
                sh '''
                    echo "üöÄ Desplegando a entorno Staging con configuraci√≥n local"
                    pip install --user aws-sam-cli
                    export PATH=$PATH:/var/lib/jenkins/.local/bin

                    sam build
                    # Capturamos la URL del endpoint
                    sam deploy --config-env staging \
                               --config-file samconfig.toml \
                               --no-confirm-changeset \
                               --no-fail-on-empty-changeset > deploy_output.txt

                    # Extraer la URL del endpoint del output
                    grep -Eo 'https?://[a-zA-Z0-9./-]+' deploy_output.txt | tail -n1 > endpoint_url.txt
                '''
                archiveArtifacts artifacts: 'endpoint_url.txt', allowEmptyArchive: false
            }
        }

        stage('Rest Test') {
            agent { label 'agent-rest' }
            steps {
                copyArtifacts(projectName: env.JOB_NAME, selector: lastSuccessful(), filter: 'endpoint_url.txt')
                sh '''
                    echo "üîó Ejecutando tests REST"
                    pip install --user pytest requests
                    export PATH=$PATH:/var/lib/jenkins/.local/bin

                    ENDPOINT=$(cat endpoint_url.txt)
                    echo "üåê Usando endpoint: $ENDPOINT"

                    mkdir -p reports
                    ENDPOINT=$ENDPOINT pytest test/rest-test/test-rest.py --junitxml=reports/rest-api-results.xml
                '''
            }
            post {
                always {
                    junit 'reports/rest-api-results.xml'
                }
                failure {
                    error("‚ùå Tests REST fallidos.")
                }
            }
        }

        stage('Promote') {
            agent { label 'default' }
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        echo "üöÄ Promoviendo a release-candidate por HTTPS con token"

                        git config --global user.email "info@qapacker.com"
                        git config --global user.name "CI Bot"

                        git remote set-url origin https://$GITHUB_TOKEN@github.com/qapacker/todo-list-aws.git
                        git checkout -b release-candidate
                        git push origin release-candidate

                        echo "üì® Creando Pull Request autom√°ticamente en GitHub"
                        curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/qapacker/todo-list-aws/pulls \
                            -d '{
                              "title": "Promoci√≥n de versi√≥n - CI",
                              "head": "release-candidate",
                              "base": "master",
                              "body": "Merge autom√°tico de develop a master para despliegue en producci√≥n"
                            }'
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Pipeline CI fallido."
        }
        success {
            echo "‚úÖ Pipeline CI finalizado correctamente y PR creado para producci√≥n."
        }
    }
}
